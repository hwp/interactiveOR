#!/bin/bash

audio_pipe=audio_pipe_temp
video_pipe=video_pipe_temp

usage() {
  echo "Usage: $0 -f frame_rate -v vocabulary_file -t nstop -m mscale -r rate -w window_size -s shift_size -n num_banks -c num_coef -o outdir files" >&2
  exit 1
}

cmd="$0 $@"

while getopts "f:v:t:m:r:w:s:n:c:o:" opt; do
  case $opt in
    f)
      frate=$OPTARG
      ;;
    v)
      vocfl=$OPTARG
      ;;
    t)
      nstop=$OPTARG
      ;;
    m)
      mscale=$OPTARG
      ;;
    r)
      rate=$OPTARG
      ;;
    w)
      wsize=$OPTARG
      ;;
    s)
      ssize=$OPTARG
      ;;
    n)
      nbanks=$OPTARG
      ;;
    c)
      csize=$OPTARG
      ;;
    o)
      outdir=$OPTARG
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND-1))

files=$@

nure='^[0-9]+$'
flre='^[-+]?[0-9]+\.?[0-9]*$'
frre='^[0-9]+/[0-9]+$'

[[ $frate =~ $frre ]] && [[ $nstop =~ $nure ]] \
  && [[ $mscale =~ $flre ]] || usage

[[ $rate =~ $nure ]] && [[ $wsize =~ $nure ]] \
  && [[ $ssize =~ $nure ]] && [[ $nbanks =~ $nure ]] \
  && [[ $csize =~ $nure ]] || usage

[[ -n $files ]] && [[ -n $outdir ]] || usage

if [[ -d $outdir ]]; then
  echo "Error: directory $outdir exists" >&2
  exit 1
elif [[ -e $outdir ]]; then
  echo "Error: file $outdir exists" >&2
  exit 1
else
  mkdir "$outdir" || exit 1
fi

if [[ -e $audio_pipe ]]; then
  echo "Error: file $audio_pipe exists" >&2
  exit 1
fi

if [[ -e $video_pipe ]]; then
  echo "Error: file $video_pipe exists" >&2
  exit 1
fi

mkfifo $audio_pipe $video_pipe

vocsize=`gval_voc_size $vocfl`
sumsize=$((vocsize - nstop + csize))

echo "# this file and the data in this folder is generated by the following command" > "${outdir}/README"
echo "# $cmd" >> "${outdir}/README"
echo "Feature: BoW-SIFT & MFCC" >> "${outdir}/README"
echo -n "Date: " >> "${outdir}/README"
date >> "${outdir}/README"
echo "Dimension: $sumsize" >> "${outdir}/README"
echo "Format: double" >> "${outdir}/README"
echo "Frame Rate: $frate" >> "${outdir}/README"
echo "Vocabulary: $vocfl" >> "${outdir}/README"
echo "Vocabulary Size: $vocsize" >> "${outdir}/README"
echo "Number of Stop Words: $nstop" >> "${outdir}/README"
echo "Minimun Scale: $mscale" >> "${outdir}/README"
echo "Sample Rate: $rate" >> "${outdir}/README"
echo "Window Size: $wsize" >> "${outdir}/README"
echo "Shift Size: $ssize" >> "${outdir}/README"
echo "Number of Filter Banks: $nbanks" >> "${outdir}/README"
echo "Begin Index of Coefficients: 1" >> "${outdir}/README"
echo "Number of Coefficients: $csize" >> "${outdir}/README"

echo "# this file records the raw media file of the feature data" > "${outdir}/SOURCES"

id=0
for file in $files; do
  echo "Processing $file" >&2
  fname=${file##*/}
  fname=${fname%.*}
  class=${fname%_*}
  dest="${class}_${id}.fvec"
  echo "$dest < $file" >> "${outdir}/SOURCES"
  gst-launch-1.0 -q filesrc location="$file" ! avidemux name=demux \
    demux.video_0 ! queue ! decodebin ! videorate ! video/x-raw,framerate=$frate ! videoconvert \
    ! bow vocabulary="$vocfl" nstop=$nstop mscale=$mscale location="$video_pipe" ! fakesink \
    demux.audio_0 ! queue ! decodebin ! audioresample ! audio/x-raw,rate=$rate ! audioconvert \
    ! mfcc wsize=$wsize ssize=$ssize banks=$nbanks cbegin=1 csize=$csize location="$audio_pipe" ! fakesink & \
    gval_merge $video_pipe $vocsize $audio_pipe $csize "$outdir/$dest" \
    || exit 1
  id=$((id + 1))
done

rm $audio_pipe $video_pipe

